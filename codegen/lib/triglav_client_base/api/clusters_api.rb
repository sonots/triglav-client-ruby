=begin
#Triglav API

#Triglav API Reference

OpenAPI spec version: 1.0.0
Contact: triglav_admin_my@dena.jp
Generated by: https://github.com/swagger-api/swagger-codegen.git

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.

=end

require "uri"

module TriglavClientBase
  class ClustersApi
    attr_accessor :api_client

    def initialize(api_client = ApiClient.default)
      @api_client = api_client
    end

    # 
    # Creates a new cluster
    # @param cluster Cluster to add
    # @param [Hash] opts the optional parameters
    # @return [Cluster]
    def create_cluster(cluster, opts = {})
      data, _status_code, _headers = create_cluster_with_http_info(cluster, opts)
      return data
    end

    # 
    # Creates a new cluster
    # @param cluster Cluster to add
    # @param [Hash] opts the optional parameters
    # @return [Array<(Cluster, Fixnum, Hash)>] Cluster data, response status code and response headers
    def create_cluster_with_http_info(cluster, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: ClustersApi.create_cluster ..."
      end
      # verify the required parameter 'cluster' is set
      fail ArgumentError, "Missing the required parameter 'cluster' when calling ClustersApi.create_cluster" if cluster.nil?
      # resource path
      local_var_path = "/clusters".sub('{format}','json')

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}

      # HTTP header 'Accept' (if needed)
      local_header_accept = ['application/json']
      local_header_accept_result = @api_client.select_header_accept(local_header_accept) and header_params['Accept'] = local_header_accept_result

      # HTTP header 'Content-Type'
      local_header_content_type = ['application/json']
      header_params['Content-Type'] = @api_client.select_header_content_type(local_header_content_type)

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(cluster)
      auth_names = ['api_key']
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'Cluster')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ClustersApi#create_cluster\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # 
    # Deletes single cluster
    # @param id_or_name ID or Name of cluster to fetch
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def delete_cluster(id_or_name, opts = {})
      delete_cluster_with_http_info(id_or_name, opts)
      return nil
    end

    # 
    # Deletes single cluster
    # @param id_or_name ID or Name of cluster to fetch
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def delete_cluster_with_http_info(id_or_name, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: ClustersApi.delete_cluster ..."
      end
      # verify the required parameter 'id_or_name' is set
      fail ArgumentError, "Missing the required parameter 'id_or_name' when calling ClustersApi.delete_cluster" if id_or_name.nil?
      # resource path
      local_var_path = "/clusters/{id_or_name}".sub('{format}','json').sub('{' + 'id_or_name' + '}', id_or_name.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}

      # HTTP header 'Accept' (if needed)
      local_header_accept = ['application/json']
      local_header_accept_result = @api_client.select_header_accept(local_header_accept) and header_params['Accept'] = local_header_accept_result

      # HTTP header 'Content-Type'
      local_header_content_type = ['application/json']
      header_params['Content-Type'] = @api_client.select_header_content_type(local_header_content_type)

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['api_key']
      data, status_code, headers = @api_client.call_api(:DELETE, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ClustersApi#delete_cluster\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # 
    # Returns a single cluster
    # @param id_or_name ID or Name of cluster to fetch
    # @param [Hash] opts the optional parameters
    # @return [Cluster]
    def get_cluster(id_or_name, opts = {})
      data, _status_code, _headers = get_cluster_with_http_info(id_or_name, opts)
      return data
    end

    # 
    # Returns a single cluster
    # @param id_or_name ID or Name of cluster to fetch
    # @param [Hash] opts the optional parameters
    # @return [Array<(Cluster, Fixnum, Hash)>] Cluster data, response status code and response headers
    def get_cluster_with_http_info(id_or_name, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: ClustersApi.get_cluster ..."
      end
      # verify the required parameter 'id_or_name' is set
      fail ArgumentError, "Missing the required parameter 'id_or_name' when calling ClustersApi.get_cluster" if id_or_name.nil?
      # resource path
      local_var_path = "/clusters/{id_or_name}".sub('{format}','json').sub('{' + 'id_or_name' + '}', id_or_name.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}

      # HTTP header 'Accept' (if needed)
      local_header_accept = ['application/json']
      local_header_accept_result = @api_client.select_header_accept(local_header_accept) and header_params['Accept'] = local_header_accept_result

      # HTTP header 'Content-Type'
      local_header_content_type = ['application/json']
      header_params['Content-Type'] = @api_client.select_header_content_type(local_header_content_type)

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['api_key']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'Cluster')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ClustersApi#get_cluster\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # 
    # Returns all clusters from the system
    # @param [Hash] opts the optional parameters
    # @return [Array<ClusterEach>]
    def list_clusters(opts = {})
      data, _status_code, _headers = list_clusters_with_http_info(opts)
      return data
    end

    # 
    # Returns all clusters from the system
    # @param [Hash] opts the optional parameters
    # @return [Array<(Array<ClusterEach>, Fixnum, Hash)>] Array<ClusterEach> data, response status code and response headers
    def list_clusters_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: ClustersApi.list_clusters ..."
      end
      # resource path
      local_var_path = "/clusters".sub('{format}','json')

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}

      # HTTP header 'Accept' (if needed)
      local_header_accept = ['application/json']
      local_header_accept_result = @api_client.select_header_accept(local_header_accept) and header_params['Accept'] = local_header_accept_result

      # HTTP header 'Content-Type'
      local_header_content_type = ['application/json']
      header_params['Content-Type'] = @api_client.select_header_content_type(local_header_content_type)

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['api_key']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'Array<ClusterEach>')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ClustersApi#list_clusters\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # 
    # Updates a single cluster
    # @param id_or_name ID or Name of cluster to fetch
    # @param cluster Cluster parameters to update
    # @param [Hash] opts the optional parameters
    # @return [Cluster]
    def update_cluster(id_or_name, cluster, opts = {})
      data, _status_code, _headers = update_cluster_with_http_info(id_or_name, cluster, opts)
      return data
    end

    # 
    # Updates a single cluster
    # @param id_or_name ID or Name of cluster to fetch
    # @param cluster Cluster parameters to update
    # @param [Hash] opts the optional parameters
    # @return [Array<(Cluster, Fixnum, Hash)>] Cluster data, response status code and response headers
    def update_cluster_with_http_info(id_or_name, cluster, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: ClustersApi.update_cluster ..."
      end
      # verify the required parameter 'id_or_name' is set
      fail ArgumentError, "Missing the required parameter 'id_or_name' when calling ClustersApi.update_cluster" if id_or_name.nil?
      # verify the required parameter 'cluster' is set
      fail ArgumentError, "Missing the required parameter 'cluster' when calling ClustersApi.update_cluster" if cluster.nil?
      # resource path
      local_var_path = "/clusters/{id_or_name}".sub('{format}','json').sub('{' + 'id_or_name' + '}', id_or_name.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}

      # HTTP header 'Accept' (if needed)
      local_header_accept = ['application/json']
      local_header_accept_result = @api_client.select_header_accept(local_header_accept) and header_params['Accept'] = local_header_accept_result

      # HTTP header 'Content-Type'
      local_header_content_type = ['application/json']
      header_params['Content-Type'] = @api_client.select_header_content_type(local_header_content_type)

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(cluster)
      auth_names = ['api_key']
      data, status_code, headers = @api_client.call_api(:PATCH, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'Cluster')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ClustersApi#update_cluster\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
  end
end
