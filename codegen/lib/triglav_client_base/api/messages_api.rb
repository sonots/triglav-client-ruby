=begin
#Triglav

#Triglav API Reference.

OpenAPI spec version: 1.0

Generated by: https://github.com/swagger-api/swagger-codegen.git

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.

=end

require "uri"

module TriglavClientBase
  class MessagesApi
    attr_accessor :api_client

    def initialize(api_client = ApiClient.default)
      @api_client = api_client
    end

    # Enqueues a new Message
    # 
    # @param resource_uri Resource URI (or Topic)
    # @param [Hash] opts the optional parameters
    # @option opts [String] :datetime Date
    # @option opts [String] :params Conditional params
    # @option opts [String] :payload Message payload
    # @return [nil]
    def api_v1_messages_create(resource_uri, opts = {})
      api_v1_messages_create_with_http_info(resource_uri, opts)
      return nil
    end

    # Enqueues a new Message
    # 
    # @param resource_uri Resource URI (or Topic)
    # @param [Hash] opts the optional parameters
    # @option opts [String] :datetime Date
    # @option opts [String] :params Conditional params
    # @option opts [String] :payload Message payload
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def api_v1_messages_create_with_http_info(resource_uri, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: MessagesApi.api_v1_messages_create ..."
      end
      # verify the required parameter 'resource_uri' is set
      fail ArgumentError, "Missing the required parameter 'resource_uri' when calling MessagesApi.api_v1_messages_create" if resource_uri.nil?
      # resource path
      local_var_path = "/api/v1/messages.json".sub('{format}','json')

      # query parameters
      query_params = {}
      query_params[:'resource_uri'] = resource_uri
      query_params[:'datetime'] = opts[:'datetime'] if !opts[:'datetime'].nil?

      # header parameters
      header_params = {}

      # HTTP header 'Accept' (if needed)
      local_header_accept = []
      local_header_accept_result = @api_client.select_header_accept(local_header_accept) and header_params['Accept'] = local_header_accept_result

      # HTTP header 'Content-Type'
      local_header_content_type = []
      header_params['Content-Type'] = @api_client.select_header_content_type(local_header_content_type)

      # form parameters
      form_params = {}
      form_params["params"] = opts[:'params'] if !opts[:'params'].nil?
      form_params["payload"] = opts[:'payload'] if !opts[:'payload'].nil?

      # http body (model)
      post_body = nil
      auth_names = []
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: MessagesApi#api_v1_messages_create\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Fetches messages
    # 
    # @param resource_uri Resource URI (or Topic)
    # @param offset Offset
    # @param [Hash] opts the optional parameters
    # @option opts [String] :datetime Date
    # @return [nil]
    def api_v1_messages_index(resource_uri, offset, opts = {})
      api_v1_messages_index_with_http_info(resource_uri, offset, opts)
      return nil
    end

    # Fetches messages
    # 
    # @param resource_uri Resource URI (or Topic)
    # @param offset Offset
    # @param [Hash] opts the optional parameters
    # @option opts [String] :datetime Date
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def api_v1_messages_index_with_http_info(resource_uri, offset, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: MessagesApi.api_v1_messages_index ..."
      end
      # verify the required parameter 'resource_uri' is set
      fail ArgumentError, "Missing the required parameter 'resource_uri' when calling MessagesApi.api_v1_messages_index" if resource_uri.nil?
      # verify the required parameter 'offset' is set
      fail ArgumentError, "Missing the required parameter 'offset' when calling MessagesApi.api_v1_messages_index" if offset.nil?
      # resource path
      local_var_path = "/api/v1/messages.json".sub('{format}','json')

      # query parameters
      query_params = {}
      query_params[:'resource_uri'] = resource_uri
      query_params[:'offset'] = offset
      query_params[:'datetime'] = opts[:'datetime'] if !opts[:'datetime'].nil?

      # header parameters
      header_params = {}

      # HTTP header 'Accept' (if needed)
      local_header_accept = []
      local_header_accept_result = @api_client.select_header_accept(local_header_accept) and header_params['Accept'] = local_header_accept_result

      # HTTP header 'Content-Type'
      local_header_content_type = []
      header_params['Content-Type'] = @api_client.select_header_content_type(local_header_content_type)

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = []
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: MessagesApi#api_v1_messages_index\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
  end
end
