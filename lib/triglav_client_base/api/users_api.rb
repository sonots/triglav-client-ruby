=begin
#Triglav

#Triglav API Reference.

OpenAPI spec version: 1.0

Generated by: https://github.com/swagger-api/swagger-codegen.git

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.

=end

require "uri"

module TriglavClientBase
  class UsersApi
    attr_accessor :api_client

    def initialize(api_client = ApiClient.default)
      @api_client = api_client
    end

    # Creates a new User
    # 
    # @param name Name
    # @param authenticator local or ldap.dena.local
    # @param groups Groups
    # @param password Password
    # @param [Hash] opts the optional parameters
    # @option opts [String] :description Description
    # @option opts [String] :email Email
    # @return [nil]
    def api_v1_users_create(name, authenticator, groups, password, opts = {})
      api_v1_users_create_with_http_info(name, authenticator, groups, password, opts)
      return nil
    end

    # Creates a new User
    # 
    # @param name Name
    # @param authenticator local or ldap.dena.local
    # @param groups Groups
    # @param password Password
    # @param [Hash] opts the optional parameters
    # @option opts [String] :description Description
    # @option opts [String] :email Email
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def api_v1_users_create_with_http_info(name, authenticator, groups, password, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: UsersApi.api_v1_users_create ..."
      end
      # verify the required parameter 'name' is set
      fail ArgumentError, "Missing the required parameter 'name' when calling UsersApi.api_v1_users_create" if name.nil?
      # verify the required parameter 'authenticator' is set
      fail ArgumentError, "Missing the required parameter 'authenticator' when calling UsersApi.api_v1_users_create" if authenticator.nil?
      # verify the required parameter 'groups' is set
      fail ArgumentError, "Missing the required parameter 'groups' when calling UsersApi.api_v1_users_create" if groups.nil?
      # verify the required parameter 'password' is set
      fail ArgumentError, "Missing the required parameter 'password' when calling UsersApi.api_v1_users_create" if password.nil?
      # resource path
      local_var_path = "/api/v1/users.json".sub('{format}','json')

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}

      # HTTP header 'Accept' (if needed)
      local_header_accept = []
      local_header_accept_result = @api_client.select_header_accept(local_header_accept) and header_params['Accept'] = local_header_accept_result

      # HTTP header 'Content-Type'
      local_header_content_type = []
      header_params['Content-Type'] = @api_client.select_header_content_type(local_header_content_type)

      # form parameters
      form_params = {}
      form_params["name"] = name
      form_params["authenticator"] = authenticator
      form_params["groups"] = @api_client.build_collection_param(groups, :csv)
      form_params["password"] = password
      form_params["description"] = opts[:'description'] if !opts[:'description'].nil?
      form_params["email"] = opts[:'email'] if !opts[:'email'].nil?

      # http body (model)
      post_body = nil
      auth_names = []
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: UsersApi#api_v1_users_create\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Deletes an existing User item
    # 
    # @param id User Id
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def api_v1_users_destroy(id, opts = {})
      api_v1_users_destroy_with_http_info(id, opts)
      return nil
    end

    # Deletes an existing User item
    # 
    # @param id User Id
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def api_v1_users_destroy_with_http_info(id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: UsersApi.api_v1_users_destroy ..."
      end
      # verify the required parameter 'id' is set
      fail ArgumentError, "Missing the required parameter 'id' when calling UsersApi.api_v1_users_destroy" if id.nil?
      # resource path
      local_var_path = "/api/v1/users/{id}.json".sub('{format}','json').sub('{' + 'id' + '}', id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}

      # HTTP header 'Accept' (if needed)
      local_header_accept = []
      local_header_accept_result = @api_client.select_header_accept(local_header_accept) and header_params['Accept'] = local_header_accept_result

      # HTTP header 'Content-Type'
      local_header_content_type = []
      header_params['Content-Type'] = @api_client.select_header_content_type(local_header_content_type)

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = []
      data, status_code, headers = @api_client.call_api(:DELETE, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: UsersApi#api_v1_users_destroy\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Fetches all User items
    # This lists all the active users
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def api_v1_users_index(opts = {})
      api_v1_users_index_with_http_info(opts)
      return nil
    end

    # Fetches all User items
    # This lists all the active users
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def api_v1_users_index_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: UsersApi.api_v1_users_index ..."
      end
      # resource path
      local_var_path = "/api/v1/users.json".sub('{format}','json')

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}

      # HTTP header 'Accept' (if needed)
      local_header_accept = []
      local_header_accept_result = @api_client.select_header_accept(local_header_accept) and header_params['Accept'] = local_header_accept_result

      # HTTP header 'Content-Type'
      local_header_content_type = []
      header_params['Content-Type'] = @api_client.select_header_content_type(local_header_content_type)

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = []
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: UsersApi#api_v1_users_index\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Fetches a single User item
    # 
    # @param id User Id
    # @param [Hash] opts the optional parameters
    # @return [User]
    def api_v1_users_show(id, opts = {})
      data, _status_code, _headers = api_v1_users_show_with_http_info(id, opts)
      return data
    end

    # Fetches a single User item
    # 
    # @param id User Id
    # @param [Hash] opts the optional parameters
    # @return [Array<(User, Fixnum, Hash)>] User data, response status code and response headers
    def api_v1_users_show_with_http_info(id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: UsersApi.api_v1_users_show ..."
      end
      # verify the required parameter 'id' is set
      fail ArgumentError, "Missing the required parameter 'id' when calling UsersApi.api_v1_users_show" if id.nil?
      # resource path
      local_var_path = "/api/v1/users/{id}.json".sub('{format}','json').sub('{' + 'id' + '}', id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}

      # HTTP header 'Accept' (if needed)
      local_header_accept = []
      local_header_accept_result = @api_client.select_header_accept(local_header_accept) and header_params['Accept'] = local_header_accept_result

      # HTTP header 'Content-Type'
      local_header_content_type = []
      header_params['Content-Type'] = @api_client.select_header_content_type(local_header_content_type)

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = []
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'User')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: UsersApi#api_v1_users_show\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Updates an existing User
    # 
    # @param id User Id
    # @param [Hash] opts the optional parameters
    # @option opts [String] :name Name
    # @option opts [String] :description Description
    # @option opts [String] :authenticator Local or ldap
    # @option opts [String] :email Email
    # @option opts [Array<Object>] :groups Groups
    # @option opts [String] :password Password for local authentication
    # @return [nil]
    def api_v1_users_update(id, opts = {})
      api_v1_users_update_with_http_info(id, opts)
      return nil
    end

    # Updates an existing User
    # 
    # @param id User Id
    # @param [Hash] opts the optional parameters
    # @option opts [String] :name Name
    # @option opts [String] :description Description
    # @option opts [String] :authenticator Local or ldap
    # @option opts [String] :email Email
    # @option opts [Array<Object>] :groups Groups
    # @option opts [String] :password Password for local authentication
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def api_v1_users_update_with_http_info(id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: UsersApi.api_v1_users_update ..."
      end
      # verify the required parameter 'id' is set
      fail ArgumentError, "Missing the required parameter 'id' when calling UsersApi.api_v1_users_update" if id.nil?
      # resource path
      local_var_path = "/api/v1/users/{id}.json".sub('{format}','json').sub('{' + 'id' + '}', id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}

      # HTTP header 'Accept' (if needed)
      local_header_accept = []
      local_header_accept_result = @api_client.select_header_accept(local_header_accept) and header_params['Accept'] = local_header_accept_result

      # HTTP header 'Content-Type'
      local_header_content_type = []
      header_params['Content-Type'] = @api_client.select_header_content_type(local_header_content_type)

      # form parameters
      form_params = {}
      form_params["name"] = opts[:'name'] if !opts[:'name'].nil?
      form_params["description"] = opts[:'description'] if !opts[:'description'].nil?
      form_params["authenticator"] = opts[:'authenticator'] if !opts[:'authenticator'].nil?
      form_params["email"] = opts[:'email'] if !opts[:'email'].nil?
      form_params["groups"] = @api_client.build_collection_param(opts[:'groups'], :csv) if !opts[:'groups'].nil?
      form_params["password"] = opts[:'password'] if !opts[:'password'].nil?

      # http body (model)
      post_body = nil
      auth_names = []
      data, status_code, headers = @api_client.call_api(:PATCH, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: UsersApi#api_v1_users_update\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
  end
end
