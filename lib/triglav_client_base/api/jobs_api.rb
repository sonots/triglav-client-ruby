=begin
#Triglav

#Triglav API Reference.

OpenAPI spec version: 1.0

Generated by: https://github.com/swagger-api/swagger-codegen.git

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.

=end

require "uri"

module TriglavClientBase
  class JobsApi
    attr_accessor :api_client

    def initialize(api_client = ApiClient.default)
      @api_client = api_client
    end

    # Deletes an existing Job item
    # 
    # @param id_or_uri Resource Id or URI
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def api_v1_jobs_destroy(id_or_uri, opts = {})
      api_v1_jobs_destroy_with_http_info(id_or_uri, opts)
      return nil
    end

    # Deletes an existing Job item
    # 
    # @param id_or_uri Resource Id or URI
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def api_v1_jobs_destroy_with_http_info(id_or_uri, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: JobsApi.api_v1_jobs_destroy ..."
      end
      # verify the required parameter 'id_or_uri' is set
      fail ArgumentError, "Missing the required parameter 'id_or_uri' when calling JobsApi.api_v1_jobs_destroy" if id_or_uri.nil?
      # resource path
      local_var_path = "/api/v1/jobs/{id_or_uri}.json".sub('{format}','json').sub('{' + 'id_or_uri' + '}', id_or_uri.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}

      # HTTP header 'Accept' (if needed)
      local_header_accept = []
      local_header_accept_result = @api_client.select_header_accept(local_header_accept) and header_params['Accept'] = local_header_accept_result

      # HTTP header 'Content-Type'
      local_header_content_type = []
      header_params['Content-Type'] = @api_client.select_header_content_type(local_header_content_type)

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = []
      data, status_code, headers = @api_client.call_api(:DELETE, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: JobsApi#api_v1_jobs_destroy\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Fetches a single Job
    # 
    # @param id_or_uri Resource Id or URI
    # @param [Hash] opts the optional parameters
    # @return [Resource]
    def api_v1_jobs_show(id_or_uri, opts = {})
      data, _status_code, _headers = api_v1_jobs_show_with_http_info(id_or_uri, opts)
      return data
    end

    # Fetches a single Job
    # 
    # @param id_or_uri Resource Id or URI
    # @param [Hash] opts the optional parameters
    # @return [Array<(Resource, Fixnum, Hash)>] Resource data, response status code and response headers
    def api_v1_jobs_show_with_http_info(id_or_uri, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: JobsApi.api_v1_jobs_show ..."
      end
      # verify the required parameter 'id_or_uri' is set
      fail ArgumentError, "Missing the required parameter 'id_or_uri' when calling JobsApi.api_v1_jobs_show" if id_or_uri.nil?
      # resource path
      local_var_path = "/api/v1/jobs/{id_or_uri}.json".sub('{format}','json').sub('{' + 'id_or_uri' + '}', id_or_uri.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}

      # HTTP header 'Accept' (if needed)
      local_header_accept = []
      local_header_accept_result = @api_client.select_header_accept(local_header_accept) and header_params['Accept'] = local_header_accept_result

      # HTTP header 'Content-Type'
      local_header_content_type = []
      header_params['Content-Type'] = @api_client.select_header_content_type(local_header_content_type)

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = []
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'Resource')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: JobsApi#api_v1_jobs_show\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Creates or Updates a Job
    # Input and output resources are also created if they do not exist. Use Resource API to update.
    # @param uri Job URI
    # @param [Hash] opts the optional parameters
    # @option opts [Array<Object>] :input_resources Input Resources
    # @option opts [Array<Object>] :output_resources Output Resources
    # @return [nil]
    def api_v1_jobs_update(uri, opts = {})
      api_v1_jobs_update_with_http_info(uri, opts)
      return nil
    end

    # Creates or Updates a Job
    # Input and output resources are also created if they do not exist. Use Resource API to update.
    # @param uri Job URI
    # @param [Hash] opts the optional parameters
    # @option opts [Array<Object>] :input_resources Input Resources
    # @option opts [Array<Object>] :output_resources Output Resources
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def api_v1_jobs_update_with_http_info(uri, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: JobsApi.api_v1_jobs_update ..."
      end
      # verify the required parameter 'uri' is set
      fail ArgumentError, "Missing the required parameter 'uri' when calling JobsApi.api_v1_jobs_update" if uri.nil?
      # resource path
      local_var_path = "/api/v1/jobs/{id_or_uri}.json".sub('{format}','json')

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}

      # HTTP header 'Accept' (if needed)
      local_header_accept = []
      local_header_accept_result = @api_client.select_header_accept(local_header_accept) and header_params['Accept'] = local_header_accept_result

      # HTTP header 'Content-Type'
      local_header_content_type = []
      header_params['Content-Type'] = @api_client.select_header_content_type(local_header_content_type)

      # form parameters
      form_params = {}
      form_params["uri"] = uri
      form_params["input_resources"] = @api_client.build_collection_param(opts[:'input_resources'], :csv) if !opts[:'input_resources'].nil?
      form_params["output_resources"] = @api_client.build_collection_param(opts[:'output_resources'], :csv) if !opts[:'output_resources'].nil?

      # http body (model)
      post_body = nil
      auth_names = []
      data, status_code, headers = @api_client.call_api(:PUT, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: JobsApi#api_v1_jobs_update\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
  end
end
