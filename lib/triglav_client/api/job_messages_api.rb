=begin
#Triglav API

#Triglav API

OpenAPI spec version: 1.0.0
Contact: triglav_admin_my@dena.jp
Generated by: https://github.com/swagger-api/swagger-codegen.git

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.

=end

require "uri"

module TriglavClient
  class JobMessagesApi
    attr_accessor :api_client

    def initialize(api_client = ApiClient.default)
      @api_client = api_client
    end

    # 
    # Fetch Job messages
    # @param offset Offset (Greater than or equal to) ID for Messages to fetch from
    # @param job_id Job ID
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :limit Number of limits
    # @return [Array<JobMessageEachResponse>]
    def fetch_job_messages(offset, job_id, opts = {})
      data, _status_code, _headers = fetch_job_messages_with_http_info(offset, job_id, opts)
      return data
    end

    # 
    # Fetch Job messages
    # @param offset Offset (Greater than or equal to) ID for Messages to fetch from
    # @param job_id Job ID
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :limit Number of limits
    # @return [Array<(Array<JobMessageEachResponse>, Fixnum, Hash)>] Array<JobMessageEachResponse> data, response status code and response headers
    def fetch_job_messages_with_http_info(offset, job_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: JobMessagesApi.fetch_job_messages ..."
      end
      # verify the required parameter 'offset' is set
      fail ArgumentError, "Missing the required parameter 'offset' when calling JobMessagesApi.fetch_job_messages" if offset.nil?
      # verify the required parameter 'job_id' is set
      fail ArgumentError, "Missing the required parameter 'job_id' when calling JobMessagesApi.fetch_job_messages" if job_id.nil?
      # resource path
      local_var_path = "/job_messages".sub('{format}','json')

      # query parameters
      query_params = {}
      query_params[:'offset'] = offset
      query_params[:'job_id'] = job_id
      query_params[:'limit'] = opts[:'limit'] if !opts[:'limit'].nil?

      # header parameters
      header_params = {}

      # HTTP header 'Accept' (if needed)
      local_header_accept = ['application/json']
      local_header_accept_result = @api_client.select_header_accept(local_header_accept) and header_params['Accept'] = local_header_accept_result

      # HTTP header 'Content-Type'
      local_header_content_type = ['application/json']
      header_params['Content-Type'] = @api_client.select_header_content_type(local_header_content_type)

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['api_key']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'Array<JobMessageEachResponse>')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: JobMessagesApi#fetch_job_messages\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # 
    # Get the current last message id which would be used as a first offset to fetch messages
    # @param [Hash] opts the optional parameters
    # @return [LastJobMessageIdResponse]
    def get_last_job_message_id(opts = {})
      data, _status_code, _headers = get_last_job_message_id_with_http_info(opts)
      return data
    end

    # 
    # Get the current last message id which would be used as a first offset to fetch messages
    # @param [Hash] opts the optional parameters
    # @return [Array<(LastJobMessageIdResponse, Fixnum, Hash)>] LastJobMessageIdResponse data, response status code and response headers
    def get_last_job_message_id_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: JobMessagesApi.get_last_job_message_id ..."
      end
      # resource path
      local_var_path = "/job_messages/last_id".sub('{format}','json')

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}

      # HTTP header 'Accept' (if needed)
      local_header_accept = ['application/json']
      local_header_accept_result = @api_client.select_header_accept(local_header_accept) and header_params['Accept'] = local_header_accept_result

      # HTTP header 'Content-Type'
      local_header_content_type = ['application/json']
      header_params['Content-Type'] = @api_client.select_header_content_type(local_header_content_type)

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['api_key']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'LastJobMessageIdResponse')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: JobMessagesApi#get_last_job_message_id\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
  end
end
